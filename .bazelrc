# Optional per-user config goes into user.bazelrc, which is .gitignore-ed.
try-import user.bazelrc
try-import /home/docker.bazelrc

build --cxxopt="-std=c++2a"
build --host_cxxopt="-std=c++2a"
build --copt -g
build --host_copt -g
build --strip=never

build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -g
build:asan --copt -O1
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address
test:asan --test_env ASAN_OPTIONS=allow_user_segv_handler=1:handle_segv=0:malloc_context_size=256:fast_unwind_on_malloc=0

# For running under valgrind
build:valgrind --strip=never
build:valgrind --copt -g
build:valgrind --copt -DPELTON_VALGRIND_MODE
test:valgrind --run_under "valgrind --error-exitcode=1 --leak-check=full"
test:valgrind --test_output all
run:valgrind --run_under "valgrind --error-exitcode=1 --errors-for-leak-kinds=definite --leak-check=full --show-leak-kinds=definite"

# For running under cachegrind
build:cachegrind -c opt
build:cachegrind --copt -DPELTON_OPT
build:cachegrind --host_copt -DPELTON_OPT
test:cachegrind --run_under "valgrind --tool=cachegrind "
test:cachegrind --test_output all
run:cachegrind --run_under "valgrind --tool=cachegrind "

# Optimized build.
build:opt -c opt  # use bazel default opt config
build:opt --copt -DPELTON_OPT
build:opt --host_copt -DPELTON_OPT

# For thread sanitizer
build:tsan --strip=never
build:tsan --copt -fsanitize=thread
build:tsan --copt -g
build:tsan --copt -O1
build:tsan --copt -fno-omit-frame-pointer
build:tsan --linkopt -fsanitize=thread

# For running under perf
build:perf -c opt
build:perf --copt -DPELTON_OPT
build:perf --host_copt -DPELTON_OPT
test:perf --run_under "sudo perf stat -B -e cache-references,cache-misses,cycles,instructions,branches,faults,migrations "
run:perf --run_under "sudo perf stat -B -e cache-references,cache-misses,cycles,instructions,branches,faults,migrations "

