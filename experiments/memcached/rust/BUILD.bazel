load("@rules_rust//rust:rust.bzl", "rust_library", "rust_test")

# Includes both the bindgen generated ffi definitions and our wrappers.
# Also, depends on the ffi .so library so that it gets linked
# with our rust code.
rust_library(
    name = "memcached_ffi",
    srcs = [
        ":memcached_ffi_bindgen",
        ":memcached_ffi_wrappers",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//memcached:mymemcached",
        "@libmemcached",
    ],
)

# Invoke bindgen to generate rust definitions for the ffi library.
genrule(
    name = "memcached_ffi_bindgen",
    srcs = [
        "//memcached:memcached.h",
    ],
    outs = [
        "memcached_ffi_bindgen.rs",
    ],
    cmd = """
        ./$(location @raze__bindgen__0_32_3//:cargo_bin_bindgen) $< -o $@
    """,
    tools = [
        "@raze__bindgen__0_32_3//:cargo_bin_bindgen",
    ],
)

# Copy proxy_wrappers to bazel out / working directory
# This way, it becomes located in the exact same directory that
# contains proxy_ffi_bindgen.rs, and can thus include! it.
genrule(
    name = "memcached_ffi_wrappers",
    srcs = [
        "memcached_ffi_wrappers.rs",
    ],
    outs = [
        "memcached_ffi.rs",
    ],
    cmd = """
        cp $< $@
    """,
)

rust_test(
    name = "memcached_ffi-test",
    srcs = [
        "memcached_ffi_unittest.rs",
    ],
    rustc_flags = [
        "-Clink-args=-lmariadbcpp",
        "-Clink-args=-lmemcached",
    ],
    deps = [
        ":memcached_ffi",
    ],
)
