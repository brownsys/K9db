filegroup(
    name = "DataFlowGraphLibraryConfig_java",
    srcs = ["DataFlowGraphLibraryConfig.java"],
    visibility = ["//pelton/planner/calcite:__subpackages__"],
)

genrule(
    name = "DataDataFlowGraphLibrary_java",
    srcs = [
        "//pelton/dataflow:generator_h",
        "DataFlowGraphLibraryConfig.java",
    ],
    outs = ["DataFlowGraphLibrary.java"],
    cmd = """
  # A side effect of running javacpp.jar is that it compiles
  # DataFlowGraphLibraryConfig.java and other input files, and generates a
  # .class file for each. It will do so in the same directory as the input file,
  # which is write-protected when running within bazel.
  # We copy the input file to a read/write directory and process it there.

  # Remember where we should have been executing from within the bazel fs.
  EXEC_PATH=$$(pwd)

  # Get the location of javacpp.jar and include path.
  JAVACPP_JAR=$$(pwd)/$(location @maven//:org_bytedeco_javacpp)
  INCLUDE_PATH=$$(pwd)

  # Create a clean tmp directory and copy input files to it.
  TMP_DIR="/tmp/__DataFlowGraphLibrary_tmp"
  rm -rf $${TMP_DIR}
  PCKG_DIR=$${TMP_DIR}/com/brownsys/pelton/nativelib/
  mkdir -p $${PCKG_DIR}
  cp $(location DataFlowGraphLibraryConfig.java) $${PCKG_DIR}

  # Execute javacpp.jar in tmp directory
  cd $${TMP_DIR}
  java -jar "$${JAVACPP_JAR}"                    \
      -Dplatform.includepath=$${INCLUDE_PATH}    \
      com/brownsys/pelton/nativelib/DataFlowGraphLibraryConfig.java

  # Move outputs to proper directory and remove tmp directory.
  cd $${EXEC_PATH}
  mv $${PCKG_DIR}DataFlowGraphLibrary.java $@
  rm -rf $${TMP_DIR}
""",
    tools = ["@maven//:org_bytedeco_javacpp"],
    visibility = ["//pelton/planner/calcite:__subpackages__"],
)

# For Linux.
genrule(
    name = "libjniDataFlowGraphLibrary_so",
    srcs = [
        ":DataDataFlowGraphLibrary_java",
        "//pelton/dataflow:generator_h",
        "DataFlowGraphLibraryConfig.java",
    ],
    outs = [
        "libjniDataFlowGraphLibrary.so",
    ],
    cmd = """
  # Similar to above, we need to process things in a tmp directory.
  # Remember where we should have been executing from within the bazel fs.
  EXEC_PATH=$$(pwd)
  READ_PATH=$${EXEC_PATH}
  while [ $$(basename $${READ_PATH}) != "sandbox" ]
  do
    READ_PATH=$$(dirname $${READ_PATH})
  done
  READ_PATH=$$(dirname $${READ_PATH})/execroot/pelton
  # Find the include path (for headers).
  INCLUDE_PATH=$$(pwd)
  # Get the location of javacpp.jar.
  JAVACPP_JAR=$$(pwd)/$(location @maven//:org_bytedeco_javacpp)

  # Create a clean tmp directory and copy input files to it.
  TMP_DIR="/tmp/__libjniDataFlowGraphLibrary_so_tmp"
  rm -rf $${TMP_DIR}
  PCKG_DIR=$${TMP_DIR}/com/brownsys/pelton/nativelib/
  mkdir -p $${PCKG_DIR}
  cp $(location DataFlowGraphLibraryConfig.java) $${PCKG_DIR}
  cp $(location :DataDataFlowGraphLibrary_java) $${PCKG_DIR}

  # Execute javacpp.jar in tmp directory
  cd $${TMP_DIR}
  java -jar "$${JAVACPP_JAR}"                     \
      -nodelete                                   \
      -Dplatform.includepath=$${INCLUDE_PATH}     \
      -Dplatform.compiler=gcc                     \
      -Xcompiler -O3                              \
      com/brownsys/pelton/nativelib/DataFlowGraphLibrary.java

  # Move outputs to proper directory and remove tmp directory.
  cd $${EXEC_PATH}
  if [ -f $${PCKG_DIR}linux-x86_64/libjniDataFlowGraphLibrary.so ]; then
    mv $${PCKG_DIR}linux-x86_64/libjniDataFlowGraphLibrary.so $@
  else
    touch $@
  fi
  rm -rf $${TMP_DIR}
""",
    tools = ["@maven//:org_bytedeco_javacpp"],
    visibility = ["//pelton/planner/calcite:__subpackages__"],
)
