load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

cc_library(
    name = "common",
    srcs = [
        "common.cc",
    ],
    hdrs = [
        "common.h",
    ],
    deps = [
        "//pelton",
        "@com_github_gflags_gflags//:gflags",
        "@com_google_googletest//:gtest",
        "@glog",
    ],
)

# lobsters.
cc_test(
    name = "lobsters",
    timeout = "long",
    srcs = [
        "lobsters.cc",
    ],
    data = [
        "//tests/data:lobsters-data",
    ],
    deps = [
        ":common",
    ],
)

# Medical chat
cc_test(
    name = "medical",
    srcs = [
        "medical.cc",
    ],
    data = [
        "//tests/data:medical-chat-data",
    ],
    deps = [
        ":common",
    ],
)

cc_test(
    name = "medical_nested_views",
    srcs = [
        "medical_nested_views.cc",
    ],
    data = [
        "//tests/data:medical-chat-nested-views-data",
    ],
    deps = [
        ":common",
    ],
)

# Variable ownership/accessorship
cc_test(
    name = "varown",
    srcs = ["varown.cc"],
    data = ["//tests/data:varown"],
    deps = [":common"],
)

cc_test(
    name = "varacc",
    srcs = ["varacc.cc"],
    data = ["//tests/data:varacc"],
    deps = [":common"],
)

# Test GDPR GET/FORGET end to end with accessors and owners..
cc_test(
    name = "delf_ecommerce",
    srcs = [
        "delf_ecommerce.cc",
    ],
    data = [
        "//tests/data:delf-ecommerce-data",
    ],
    deps = [
        ":common",
    ],
)

cc_test(
    name = "delf_medical_retain",
    srcs = [
        "delf_medical_retain.cc",
    ],
    data = [
        "//tests/data:delf-medical-chat-retain-data",
    ],
    deps = [
        ":common",
    ],
)
