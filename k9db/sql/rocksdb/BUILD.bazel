load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")

cc_library(
    name = "rocksdb_connection",
    srcs = [
        "rocksdb_connection.cc",
        "rocksdb_delete.cc",
        "rocksdb_explain.cc",
        "rocksdb_gdpr.cc",
        "rocksdb_insert.cc",
        "rocksdb_schema.cc",
        "rocksdb_select.cc",
        "rocksdb_session.cc",
        "rocksdb_shard.cc",
        "rocksdb_update.cc",
    ],
    hdrs = [
        "rocksdb_connection.h",
        "rocksdb_helpers.cc",
    ],
    visibility = ["//k9db:__subpackages__"],
    deps = [
        ":dedup",
        ":encode",
        ":encryption",
        ":filter",
        ":metadata",
        ":project",
        ":table",
        ":transaction",
        "//k9db/dataflow:record",
        "//k9db/dataflow:schema",
        "//k9db/sql:connection",
        "//k9db/sql:result",
        "//k9db/sqlast:ast",
        "//k9db/sqlast:value_mapper",
        "//k9db/util:shard_name",
        "//k9db/util:status",
        "@glog",
        "@rocksdb",
    ],
)

cc_library(
    name = "metadata",
    srcs = [
        "metadata.cc",
    ],
    hdrs = [
        "metadata.h",
    ],
    deps = [
        "//k9db/sqlast:ast",
        "//k9db/util:status",
        "@glog",
        "@rocksdb",
    ],
)

cc_library(
    name = "transaction",
    srcs = [
        "transaction.cc",
    ],
    hdrs = [
        "transaction.h",
    ],
    visibility = ["//k9db/sql:__subpackages__"],
    deps = [
        "//k9db/util:status",
        "@glog",
        "@rocksdb",
    ],
)

cc_library(
    name = "dedup",
    srcs = [],
    hdrs = [
        "dedup.h",
    ],
    visibility = ["//k9db/sql:__subpackages__"],
    deps = [
        ":encode",
    ],
)

cc_library(
    name = "plan",
    srcs = [
        "plan.cc",
    ],
    hdrs = [
        "plan.h",
    ],
    visibility = ["//k9db:__subpackages__"],
    deps = [
        "//k9db/dataflow:schema",
        "//k9db/sqlast:ast",
        "//k9db/sqlast:value_mapper",
    ],
)

cc_library(
    name = "table",
    srcs = [
        "table.cc",
    ],
    hdrs = [
        "table.h",
    ],
    visibility = ["//k9db/sql:__subpackages__"],
    deps = [
        ":encode",
        ":encryption",
        ":index",
        ":metadata",
        ":plan",
        ":transaction",
        "//k9db/dataflow:schema",
        "//k9db/sqlast:value_mapper",
        "//k9db/util:status",
        "@glog",
        "@rocksdb",
    ],
)

cc_library(
    name = "encode",
    srcs = [
        "encode.cc",
    ],
    hdrs = [
        "encode.h",
    ],
    deps = [
        "//k9db/dataflow:record",
        "//k9db/dataflow:schema",
        "//k9db/sqlast:ast",
        "//k9db/util:shard_name",
        "@glog",
        "@rocksdb",
    ],
)

cc_library(
    name = "project",
    srcs = [
        "project.cc",
    ],
    hdrs = [
        "project.h",
    ],
    deps = [
        "//k9db/dataflow:record",
        "//k9db/dataflow:schema",
        "//k9db/sqlast:ast",
        "@glog",
        "@rocksdb",
    ],
)

cc_library(
    name = "filter",
    srcs = [
        "filter.cc",
    ],
    hdrs = [
        "filter.h",
    ],
    visibility = ["//k9db:__subpackages__"],
    deps = [
        "//k9db/dataflow:record",
        "//k9db/dataflow:schema",
        "//k9db/sqlast:ast",
        "//k9db/sqlast:value_mapper",
        "@glog",
    ],
)

cc_library(
    name = "index",
    srcs = [
        "index.cc",
    ],
    hdrs = [
        "index.h",
    ],
    deps = [
        ":dedup",
        ":encode",
        ":metadata",
        ":transaction",
        "//k9db/dataflow:schema",
        "//k9db/sqlast:ast",
        "//k9db/sqlast:value_mapper",
        "//k9db/util:iterator",
        "//k9db/util:status",
        "@glog",
        "@rocksdb",
    ],
)

# Disable/enable encryption using bazel command line args.
# .bazelrc defines an alias to shortcut this
# e.g. bazel build ... --encryption=on    [default]
#      bazel build ... --encryption=off
string_flag(
    name = "configure_encryption",
    build_setting_default = "on",
    values = [
        "on",
        "off",
    ],
)

config_setting(
    name = "disable_encryption",
    flag_values = {
        ":configure_encryption": "off",
    },
)

cc_library(
    name = "encryption",
    srcs = select({
        ":disable_encryption": ["encryption_off.cc"],
        "//conditions:default": ["encryption_on.cc"],
    }),
    hdrs = [
        "encryption.h",
    ],
    deps = [
        ":encode",
        ":metadata",
        "//k9db/util:shard_name",
        "//k9db/util:upgradable_lock",
        "@glog",
        "@libsodium",
        "@rocksdb",
    ],
)

# Tests.
cc_test(
    name = "rocksdb-test",
    srcs = [
        "rocksdb_unittest.cc",
    ],
    deps = [
        ":rocksdb_connection",
        "//k9db/dataflow:record",
        "//k9db/dataflow:schema",
        "//k9db/sql:result",
        "//k9db/sqlast:ast",
        "//k9db/util:ints",
        "//k9db/util:iterator",
        "//k9db/util:shard_name",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
        "@glog",
    ],
)

cc_test(
    name = "transaction-test",
    srcs = [
        "transaction_unittest.cc",
    ],
    deps = [
        ":transaction",
        "//k9db/util:status",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
        "@rocksdb",
    ],
)

cc_test(
    name = "index-test",
    srcs = [
        "index_unittest.cc",
    ],
    deps = [
        ":index",
        ":transaction",
        "//k9db/util:ints",
        "//k9db/util:status",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
        "@rocksdb",
    ],
)

cc_test(
    name = "project-test",
    srcs = [
        "project_unittest.cc",
    ],
    deps = [
        ":project",
        "//k9db/dataflow:record",
        "//k9db/dataflow:schema",
        "//k9db/util:ints",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "filter-test",
    srcs = [
        "filter_unittest.cc",
    ],
    deps = [
        ":filter",
        "//k9db/dataflow:record",
        "//k9db/dataflow:schema",
        "//k9db/sqlast:value_mapper",
        "//k9db/util:ints",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "encode-test",
    srcs = [
        "encode_unittest.cc",
    ],
    deps = [
        ":encode",
        "//k9db/dataflow:record",
        "//k9db/dataflow:schema",
        "//k9db/sqlast:ast",
        "//k9db/util:ints",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
        "@rocksdb",
    ],
)

cc_test(
    name = "table-test",
    srcs = [
        "table_unittest.cc",
    ],
    deps = [
        ":encode",
        ":encryption",
        ":table",
        ":transaction",
        "//k9db/dataflow:schema",
        "//k9db/sqlast:ast",
        "//k9db/util:status",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
        "@rocksdb",
    ],
)
